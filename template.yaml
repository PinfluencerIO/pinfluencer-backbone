AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Pinfluencer backend stack

Parameters:
  UserPoolId:
    Type: String
    Description: User pool id for Cognito
  ClientIdAudienceLegacy:
    Type: String
    Description: Legacy client id for user pool
  ClientIdAudienceWeb:
    Type: String
    Description: React SPA client id for user pool
  DatabaseUser:
    Type: String
    Description: DB_USER
  DatabasePassword:
    Type: String
    Description: DB_PASSWORD
  DatabaseUrl:
    Type: String
    Description: DB_URL
  DatabaseName:
    Type: String
    Description: DB_NAME
  LambdaRole:
    Type: String
    Description: The role which the lambda executes

Globals:
  Function:
    Timeout: 50
    Environment:
      Variables:
        USER_POOL_ID: !Ref UserPoolId
        DB_USER: !Ref DatabaseUser
        DB_PASSWORD: !Ref DatabasePassword
        DB_URL: !Ref DatabaseUrl
        DB_NAME: !Ref DatabaseName
        ENVIRONMENT: PROD

Resources:
  PinfluencerHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins:
          - "https://localhost:3000"
          - "http://localhost:3000"
          - "https://app.pinfluencer.io"
        AllowHeaders:
          - "*"
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
          - OPTIONS
          - PATCH
      Auth:
        Authorizers:
          UserAuth:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer:
                !Join
                - ''
                - - 'https://cognito-idp.'
                  - !Sub ${AWS::Region}
                  - '.amazonaws.com/'
                  - !Sub ${UserPoolId}
              audience:
                - !Sub ${ClientIdAudienceLegacy}
                - !Sub ${ClientIdAudienceWeb}

  PinfluencerFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 10240
      Role: !Ref LambdaRole
      CodeUri: ./
      Handler: src/app.lambda_handler
      Runtime: python3.9
      Events:
        #PUBLIC Endpoints START
        Feed:
          Type: HttpApi
          Properties:
            Path: /feed
            Method: get
            ApiId: !Ref PinfluencerHttpApi

        GetAllBrands:
          Type: HttpApi
          Properties:
            Path: /brands
            Method: get
            ApiId: !Ref PinfluencerHttpApi
        GetBrandById:
          Type: HttpApi
          Properties:
            Path: /brands/{brand_id}
            Method: get
            ApiId: !Ref PinfluencerHttpApi

        GetAllInfluencers:
          Type: HttpApi
          Properties:
            Path: /influencers
            Method: get
            ApiId: !Ref PinfluencerHttpApi
        GetInfluencerById:
          Type: HttpApi
          Properties:
            Path: /influencers/{influencer_id}
            Method: get
            ApiId: !Ref PinfluencerHttpApi

        GetMyCampaignById:
          Type: HttpApi
          Properties:
            Path: /campaigns/{campaign_id}
            Method: get
            ApiId: !Ref PinfluencerHttpApi
        #PUBLIC Endpoints END

        #Authenticated Influencer endpoints START
        CreateMyInfluencer:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /influencers/me
            Method: post
            ApiId: !Ref PinfluencerHttpApi
        GetMyInfluencer:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /influencers/me
            Method: get
            ApiId: !Ref PinfluencerHttpApi
        UpdateMyInfluencerImage:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /influencers/me/images/{image_field}
            Method: post
            ApiId: !Ref PinfluencerHttpApi
        UpdateMyInfluencer:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /influencers/me
            Method: patch
            ApiId: !Ref PinfluencerHttpApi
        #Authenticated Influencer endpoints END

        #Authenticated Brand endpoints START
        CreateMyBrand:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me
            Method: post
            ApiId: !Ref PinfluencerHttpApi
        GetMyBrand:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me
            Method: get
            ApiId: !Ref PinfluencerHttpApi
        UpdateMyBrandLogo:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me/images/{image_field}
            Method: post
            ApiId: !Ref PinfluencerHttpApi
        UpdateMyBrand:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me
            Method: patch
            ApiId: !Ref PinfluencerHttpApi
        #Authenticated Brand endpoints END

        #Authenticated Campaign endpoints START
        CreateMyBrandCampaign:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me/campaigns
            Method: post
            ApiId: !Ref PinfluencerHttpApi
        CreateCampaignProductImage:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me/campaigns/{campaign_id}/images/{image_field}
            Method: post
            ApiId: !Ref PinfluencerHttpApi
        GetAllMyBrandCampaigns:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me/campaigns
            Method: get
            ApiId: !Ref PinfluencerHttpApi
        UpdateMyCampaignById:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me/campaigns/{campaign_id}
            Method: patch
            ApiId: !Ref PinfluencerHttpApi
        DeleteMyCampaignById:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: UserAuth
            Path: /brands/me/campaigns/{campaign_id}
            Method: delete
            ApiId: !Ref PinfluencerHttpApi
        #Authenticated Campaign endpoints END
Outputs:
  PinfluencerBaseUrl:
    Description: "Base URL for Pinfluencer API"
    Value: !Sub "https://${PinfluencerHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"